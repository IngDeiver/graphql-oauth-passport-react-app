// import { commentLoad, commentAdded } from '../actions/commentActions'
import { createAsyncThunk } from '@reduxjs/toolkit'
import { gql } from '@apollo/client';


/*export const fetchCommentsThunk = (dispatch, getState) => {
    try {
        setTimeout(()=>{
            dispatch(commentLoad([{_id:"id_string", content:"Fake comment", owner:{username:"Fake user"}},
            {_id:"id_string2", content:"Fake comment2", owner:{username:"Fake user2"}}]));
        }, 2000)
    }catch(err){
        dispatch(ErrorAction(err))
    }
}*/

/* with createAsyncThunk
The payloadCreator function will be called with two arguments:
arg: a single value, containing the first parameter that was passed to the thunk action creator when
 it was dispatched. This is useful for passing in values like item IDs that may be needed as part of 
 the request. If you need to pass in multiple values, pass them together in an object when you dispatch 
 the thunk, like dispatch(fetchUsers({status: 'active', sortBy: 'name'})).
thunkAPI: an object containing all of the parameters that are normally passed to a Redux thunk function,
 as well as additional options:
dispatch: the Redux store dispatch method
getState: the Redux store getState method
extra: the "extra argument" given to the thunk middleware on setup, if available
requestId: a unique string ID value that was automatically generated to identify this request sequence
signal: an AbortController.signal object that may be used to see if another part of the app logic has 
marked this request as needing cancelation.
rejectWithValue: rejectWithValue is a utility function that you can return in your action creator to 
return a rejected response with a defined payload. It will pass whatever value you give it and return 
it in the payload of the rejected action.*/
export const fetchCommentsThunk = createAsyncThunk("comment/fecthComments", async ({ apolloClient}) => {
        const COMMENTS = gql`
            query {
                getComments {
                    _id
                    content
                    owner{
                        username
                        avatar
                    }
                }
            }`;
        const response = await apolloClient.query({ query: COMMENTS })
        return response.data.getComments
})



/*The thunks generated by createAsyncThunk will always return a resolved promise with either the fulfilled
action object or rejected action object inside, as appropriate.
The calling logic may wish to treat these actions as if they were the original promise contents. 
Redux Toolkit exports an unwrapResult function that can be used to extract the payload or error 
from the action, and return or throw the result appropriately:
Note that this means a failed request or error in a thunk will never return a rejected promise. 
We assume that any failure is more of a handled error than an unhandled exception at this point. 
This is due to the fact that we want to prevent uncaught promise rejections for those who do not
use the result of dispatch.
If your component needs to know if the request failed, use unwrapResult and handle the re-thrown error
accordingly.
If you need to customize the contents of the rejected action, you should catch any errors yourself, 
and then return a new value using the thunkAPI.rejectWithValue utility. Doing return 
rejectWithValue(errorPayload) will cause the rejected action to use that value as action.payload.
The rejectWithValue approach should also be used if your API response "succeeds", but contains some 
kind of additional error details that the reducer should know about. This is particularly common when 
expecting field-level validation errors from an API.*/
export const saveCommentThunk = createAsyncThunk("comment/addComment", async ({ content, apolloClient }) => {   
        const ADD_COMMENT = gql`
        mutation addComment($comment: InputComment!){
                addComment(comment:$comment){
                    _id
                    content
                    owner {
                        username
                        avatar
                      }
                }
            }
        `;
        const response = await apolloClient.mutate({
            mutation: ADD_COMMENT,
            variables: { comment: { content } }
        })
        return response.data.addComment
})